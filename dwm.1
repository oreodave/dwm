.TH DWM 1 dwm\-VERSION
.SH NAME
dwm \- dynamic window manager
.SH SYNOPSIS
.B dwm
.RB [ \-v ]
.SH DESCRIPTION
dwm is a dynamic window manager for X.  It manages windows in a
variety of layouts:
.nr PI 1n
.IP \[bu]
floating: windows can be resized and moved freely, a la usual window
managers.
.IP \[bu]
tiled: windows are managed in a master and stacking area.  The master
area on the left contains one window by default, and the stacking area
on the right contains all other windows.  The number of master area
windows can be adjusted from zero to an arbitrary number.
.IP \[bu]
monocle (normal, centred or floating)

Normal: all windows are maximised to the screen size.

Centred: the screen is split into three sections with the master
clients getting the second section and the stacking clients get the
remaining 2 sections to be laid out in.

Floating: the master clients are placed floating in the centre of the
screen while the remaining stacking clients are placed side by side
vertically.
.IP \[bu]
fibonacci (dwindle and spiral): windows are tiled in a spiralling or
dwindling pattern.

In the dwindle layout new clients tend towards the bottom left of the
monitor while in the spiral layout clients tend towards the centre
bottom left.
.IP \[bu]
deck: the stacking clients are placed floating on top of each other
such that there are only two partitions of the screen space.
.IP \[bu]
gapless grid: n clients are arranged into a square of ceil(sqrt(n))
length, where the top left is the latest client opened.
.P
Dialog windows are always managed floating, regardless of the layout
applied.
.P
Windows are grouped by tags. Each window can be tagged with one or
multiple tags. Selecting certain tags displays all windows with these
tags.
.P
Each screen contains a small status bar which displays all available
tags, the layout, the title of the focused window, and the text read
from the root window name property, if the screen is focused. A
floating window is indicated with an empty square and a maximised
floating window is indicated with a filled square before the windows
title.  The selected tags are indicated with a different color. The
tags of the focused window are indicated with a filled square in the
top left corner.  The tags which are applied to one or more windows
are indicated with an empty square in the top left corner.
.P
dwm draws a small border around windows to indicate the focus state.
.SH OPTIONS
.TP
.B \-v
prints version information to stderr, then exits.
.SH USAGE
.SS Status bar
.TP
.B X root window name
is read and displayed in the status text area. It can be set with the
.BR xsetroot (1).  This fork uses dwmblocks to generate system status information.
command.
.SS Keyboard commands
Mod is set to Super (the "windows" key).
.TP
.B Mod\-b
Toggle status bar

.TP
.B Mod\-`
Toggle scratchpad terminal (set to
.BR st(1)
)

.TP
.B Mod\-j
Focus next window

.TP
.B Mod\-k
Focus previous window

.TP
.B Mod\-.
Increase gap size

.TP
.B Mod\-,
Decrease gap size

.TP
.B Mod\-/
Toggle gaps

.TP
.B Mod\-Shift\-/
Print current gap value (using
.BR notify-send(1)
)

.TP
.B Mod\-h
Decrease size of master area

.TP
.B Mod\-l
Increase size of master are

.TP
.B Mod\-Control\-.
Decrease number of master clients

.TP
.B Mod\-Control\-,
Increase number of master clients

.TP
.B Mod\-Shift\-h
Rotate the stack clockwise but keep focus on the same position.

.TP
.B Mod\-Shift\-l
Rotate the stack anticlockwise but keep focus on the same position.

.TP
.B Mod\-Shift\-k
Rotate the master clients clockwise but keep focus on the same position.

.TP
.B Mod\-Shift\-j
Rotate the master clients anticlockwise but keep focus on the same position.

.TP
.B Mod\-c
If in stack area, swap currently focused client with master.  If in master area, swap currently focused client with top of stack area.

.TP
.B Mod\-Shift\-t
Set layout to tiling

.TP
.B Mod\-Shift\-f
Set layout to floating

.TP
.B Mod\-Shift\-m
Set layout to monocle

.TP
.B Mod\-Shift\-u
Set layout to centred monocle

.TP
.B Mod\-Shift\-o
Set layout to centred floating monocle

.TP
.B Mod\-Shift\-s
Set layout to spiral fibonacci

.TP
.B Mod\-Shift\-d
Set layout to dwindle fibonacci

.TP
.B Mod\-Shift\-g
Set layout to gapless grid

.TP
.B Mod\-Shift\-i
Set layout to deck

.TP
.B Mod\-Shift\-space
Toggle between current layout and previous layout

.TP
.B Mod\-space
Toggle current client's floating (floating -> not floating, not floating -> floating)

.TP
.B Mod1\-[1..n]
Go to nth tag

.TP
.B Mod1\-Shift\-[1..n]
Send focused client to nth tag.

.TP
.B Mod\-m
Focus on the next monitor in monitor stack

.TP
.B Mod\-Shift\-,
Send client to previous monitor in monitor stack

.TP
.B Mod\-Shift\-.
Send client to next monitor in monitor stack

.TP
.B Mod\-Tab
View the previous tag

.TP
.B Mod\-q
Kill the currently focused client

.TP
.B Mod\-Shift\-q
Kill dwm

.SS Mouse commands

.TP
.B Mod1\-Button1
Move focused window while dragging. Tiled windows will be toggled to the floating state.

.TP
.B Mod1\-Button2
Toggles focused window between floating and tiled state.

.TP
.B Mod1\-Button3
Resize focused window while dragging. Tiled windows will be toggled to the floating state.

.SH CUSTOMIZATION
dwm is customized by creating a custom config.h and (re)compiling the source
code. This keeps it fast, secure and simple.
.SH SEE ALSO
.BR dmenu (1),
.BR st (1)
.SH ISSUES
Java applications which use the XToolkit/XAWT backend may draw grey windows
only. The XToolkit/XAWT backend breaks ICCCM-compliance in recent JDK 1.5 and early
JDK 1.6 versions, because it assumes a reparenting window manager. Possible workarounds
are using JDK 1.4 (which doesn't contain the XToolkit/XAWT backend) or setting the
environment variable
.BR AWT_TOOLKIT=MToolkit
(to use the older Motif backend instead) or running
.B xprop -root -f _NET_WM_NAME 32a -set _NET_WM_NAME LG3D
or
.B wmname LG3D
(to pretend that a non-reparenting window manager is running that the
XToolkit/XAWT backend can recognize) or when using OpenJDK setting the environment variable
.BR _JAVA_AWT_WM_NONREPARENTING=1 .
.SH BUGS
Send all bug reports with a patch to hackers@suckless.org.
